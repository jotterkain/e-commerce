// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id          String    @id
  firstName   String
  lastName    String?
  email       String    @unique
  phoneNumber String?   @unique
  dateOfBirth String
  hibernated  Boolean   @default(false)
  savedCards  Card[]
  favoritess  Product[] @relation(name: "FavoriteItems")
  wishList    Product[] @relation(name: "WishList")
  orders      Order[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Address     Address?
}

model Address {
  id           String     @id @default(uuid()) @db.Uuid
  countryCode  String
  state        String
  city         String
  street       String?
  postalCode   String?
  neighborhood String?
  buildingName String? // building known as
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  customer     Customer?  @relation(fields: [customerId], references: [id])
  customerId   String?    @unique
  Supplier     Supplier[]
  Order        Order[]
}

// we will use an external service to save the full
// data infos... we will just store the id to fetch it here
model Card {
  id             String     @id @default(uuid()) @db.Uuid
  ownerName      String
  cardNumber     String     @unique
  expirationDate String
  cvv            String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  customers      Customer[]
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  parent      Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  parentId    Int?
  children    Category[] @relation("CategoryToParent")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Product {
  id             String          @id @default(uuid()) @db.Uuid
  name           String
  category       Category        @relation(fields: [categoryId], references: [id])
  stock          Int
  price          Decimal
  images         String[]
  supplier       Supplier        @relation(fields: [supplierId], references: [id])
  manufacturer   Manufacturer    @relation(fields: [manufacturerId], references: [id])
  favoriteOf     Customer[]      @relation("FavoriteItems")
  wishedBy       Customer[]      @relation("WishList")
  categoryId     Int
  supplierId     String          @db.Uuid
  manufacturerId String          @db.Uuid
  soldes         SpecialOffers[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  OrderItem      OrderItem[]
}

model Order {
  id              String      @id @default(uuid()) @db.Uuid
  items           OrderItem[]
  customer        Customer    @relation(fields: [customerId], references: [id])
  customerId      String
  deliveryAddress Address     @relation(fields: [addressId], references: [id])
  addressId       String      @db.Uuid
  delivered       Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid()) @db.Uuid
  product   Product @relation(fields: [productId], references: [id])
  quanity   Int
  Order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String? @db.Uuid
  productId String  @db.Uuid
}

model Supplier {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  email       String    @unique
  phoneNumber String    @unique
  address     Address   @relation(fields: [addressId], references: [id])
  addressId   String    @db.Uuid
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Manufacturer {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  email       String    @unique
  phoneNumber String    @unique
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SpecialOffers {
  id              String    @id @default(uuid()) @db.Uuid
  name            String    @unique
  description     String
  discountAmount  Float?
  discountPercent Float?
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean   @default(true)
  products        Product[]
}
