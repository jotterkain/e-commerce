// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id          String     @id
  firstName   String
  lastName    String?
  email       String     @unique
  phoneNumber String?    @unique
  dateOfBirth DateTime
  address     Address?   @relation(fields: [addressId], references: [id])
  savedCards  Card[]
  favoritess  Product[]  @relation(name: "FavoriteItems")
  wishList    Product[]  @relation(name: "WishList")
  cart        Cart?
  addressId   String?    @db.Uuid
  purhases    Purchase[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Address {
  id           String     @id @default(uuid()) @db.Uuid
  countryCode  String
  state        String
  city         String
  street       String
  postalCode   String
  neighborhood String?
  buildingName String? // building known as
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  customers    Customer[]
  Supplier     Supplier[]
  purchases    Purchase[]
}

model Card {
  id          String     @id @default(uuid()) @db.Uuid
  cardNumber  String     @unique
  expiryMonth Int
  expiryYear  Int
  cvvHash     String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  customers   Customer[]
}

model Purchase {
  id                String         @id @default(uuid()) @db.Uuid
  createdAt         DateTime       @default(now())
  customer          Customer?      @relation(fields: [customerId], references: [id])
  customerId        String?
  command           Command?
  totalPrice        Decimal
  deliveryAddress   Address        @relation(fields: [deliveryAddressId], references: [id])
  deliveryAddressId String         @db.Uuid
  items             PurchaseItem[]
}

model Command {
  id         String   @id @default(uuid()) @db.Uuid
  delivered  Boolean  @default(false)
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  purchaseId String   @unique @db.Uuid
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  parent      Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  parentId    Int?
  children    Category[] @relation("CategoryToParent")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Product {
  id             String          @id @default(uuid()) @db.Uuid
  name           String
  category       Category        @relation(fields: [categoryId], references: [id])
  stock          Int
  price          Decimal
  images         String[]
  supplier       Supplier        @relation(fields: [supplierId], references: [id])
  manufacturer   Manufacturer    @relation(fields: [manufacturerId], references: [id])
  favoriteOf     Customer[]      @relation("FavoriteItems")
  wishedBy       Customer[]      @relation("WishList")
  inCart         CartItem[]
  pucharseItems  PurchaseItem[]
  categoryId     Int
  supplierId     String          @db.Uuid
  manufacturerId String          @db.Uuid
  soldes         SpecialOffers[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model PurchaseItem {
  id         String   @id @default(uuid()) @db.Uuid
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @db.Uuid
  Purchase   Purchase @relation(fields: [purchaseId], references: [id])
  purchaseId String   @db.Uuid
}

model Cart {
  customer   Customer   @relation(fields: [customerId], references: [id])
  customerId String     @id @unique
  items      CartItem[]
}

model CartItem {
  id        String   @id @default(uuid()) @db.Uuid
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.Uuid
  cart      Cart     @relation(fields: [cartId], references: [customerId])
  cartId    String
}

model Supplier {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  email       String    @unique
  phoneNumber String    @unique
  address     Address   @relation(fields: [addressId], references: [id])
  addressId   String    @db.Uuid
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Manufacturer {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  email       String    @unique
  phoneNumber String    @unique
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SpecialOffers {
  id              String    @id @default(uuid()) @db.Uuid
  name            String    @unique
  description     String
  discountAmount  Float?
  discountPercent Float?
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean   @default(true)
  products        Product[]
}
